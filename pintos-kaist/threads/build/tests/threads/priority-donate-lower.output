Kernel command line: -q run priority-donate-lower
0 ~ 9fc00 1
100000 ~ 13e0000 1
Pintos booting with: 
	base_mem: 0x0 ~ 0x9fc00 (Usable: 639 kB)
	ext_mem: 0x100000 ~ 0x13e0000 (Usable: 19,328 kB)
Calibrating timer...  52,377,600 loops/s.
Boot complete.
Executing 'priority-donate-lower':
(priority-donate-lower) begin
(priority-donate-lower) Main thread should have priority 41.  Actual priority: 31.
(priority-donate-lower) Lowering base priority...
(priority-donate-lower) Main thread should have priority 41.  Actual priority: 21.
(priority-donate-lower) acquire must already have finished.
(priority-donate-lower) Main thread should have priority 21.  Actual priority: 21.
(priority-donate-lower) end
(priority-donate-lower) acquire: got the lock
Interrupt 0x0d (#GP General Protection Exception) at rip=8004213e04
 cr2=0000000000000000 error=               0
rax 8348e5894855c3c9 rbx 0000000000000000 rcx 00000080040b8000 rdx 8948a87d894860ec
rsp 0000008004234f10 rbp 0000008004234f20 rsi 000000000000800f rdi 0000008004216a4d
rip 0000008004213e04 r8 0000008004234ebc  r9 0000000000000000 r10 0000000000000000
r11 0000000000000000 r12 0000000000000000 r13 0000000000000000 r14 0000000000000000
r15 0000000000000000 rflags 00000002
es: 0010 ds: 0010 cs: 0008 ss: 0010
Kernel PANIC at ../../threads/interrupt.c:361 in intr_handler(): Unexpected interrupt
Call stack: 0x800421359f 0x8004208b16 0x8004208ec8 0x8004213e5a 0x8004209c4e 0x800420a10f 0x8004218be0 0x800420729d.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 27 ticks
Thread: 0 idle ticks, 27 kernel ticks, 0 user ticks
Console: 1